Lab 5 Feedback

113

-1 In cVarExprNode you had "static_cast<cSymbol *>(GetChild(0)" twice. You shouldn't duplicate code.

-15 Code did not compile as delivered

-3 Did not implement negative numbers as requested.

-5 Did not implement assignment type checks

-2 Did not always detect function decls with a different number of args

-2 Under some circumstances the id for a func arg did not match the varref in the body

-5 If the argument to a function is an undefined variable, your code segfaults

-5 Did not implement the code to determine the type of an array dereference

-5 Did not implement the "is an array" error

-5 Did not implement the "index is not an int" error

-1 Did not allow a char to be passed to a function that took an int arg.

-3 One of my other tests segfaulted, but I didn't investigate the cause.

***********************************

Lab 4 Feedback

142

-5 Some of your code snippets didn't set $$ (for example one of the func_decl ones). As a result, you weren't explicitly controlling the construction of the AST. Your tests passed because you got lucky.

-3 Your implementation of cFuncDeclNode would make it difficult to write getters for all the pieces. For example, where are the statements? in m_children[2], [3], or [4]?


******************************************

Lab 3 Feedback

97

-3 Your LookUpAll will return the symbol from the outer most scope in which it is defined. It should return the symbol from the inner most scope in which it is defined. To fix this, add a return statement inside the if.


**********************************************

Lab1 Feedback

--Accidently deleted contents on 1/18
    Lab1 Grade: 100
    Made a comment about using one RE to account for whitespace instead of having separate ones (\n, \t, \r, etc).


